C语言命名规范
关键字：
        if(size > 0){                                   if(size > 0)
        }          相比代码更加紧凑               {
                                                            }
对于Java来说，命名规则是很明确的。包名，使用网络地址倒置，小写，如com.myssh.action。类名，大写开头，驼峰写法，如LoginAction。方法名，小写开头，驼峰写法，如getUser()。变量名，小写开头，驼峰写法，如userId。常量名，大写开头，下划线分割，如MAX_LENGTH。其中包名，类名，方法名，和公开的常量名都是要面向外部的，建议就依照规则命名就是了。只有变量名，特别是局部变量，如果你喜欢max_row之类的风格的话，倒也无伤大雅。当然前提是不是团队协作项目，如果是团队协作项目当然是按照团队的规则来办。

Java中一般是final变量才用大写字母+下划线命名。

     函数命名太长，会有头重脚轻的感觉。

     简单全局变量，复杂结构，函数参数使用下划线，局部变量使用，普通数组，结构数组，指针数组。
个人规则：
     全局变量使用g_前缀；类型对命名几乎不应该有影响，我们只需要考虑指针增加p的前缀，数组增加
个人命名规则: 下面方式太生硬了，
     1. 变量名使用骆驼命名法， 函数使用帕斯卡命名法；
     2. 常量命令使用大写，中间间隔以下划线
     3. 函数内局部和全局变量使用不同的命名方法，局部使用下划线，全局使用骆驼命名法。
     4. 变量使用前缀
          1、 整型前缀      int   nId;  //int前缀:n   short   sId;  //short前缀:s unsigned int unId  // unsigned int 前缀:un long   lId;  //long前缀:l
          2、 浮点型前缀  float   fValue; //float前缀：f double  dValue; //double前缀：d
          3、 字符型前缀  char   chChar; //char前缀：ch
          4、 字符串前缀  char   szPath; //char字符串前缀：sz string  strPath; //string字符串前缀：str CString  strPath; //MFC CString类前缀：str
          5、 布尔型前缀  bool   bIsOK; //bool类型前缀：b BOOL  bIsOK; //MFC BOOL前缀：b
          6、 指针型前缀  char *   pPath; //指针前缀：p
          7、 数组前缀     int    arrnNum;  //数组前缀：arr         CString  arrstrName; //数组前缀+类型前缀+名称
          8、 结构体前缀  STUDENT  tXiaoZhang; //结构体前缀：t
          9、 枚举前缀  enum   emWeek;  //枚举前缀：em
          10、 字节的前缀  BYTE   byIP;  //字节前缀：by
          11、 字的前缀  DWORD  dwMsgID; //双字前缀：dw WORD  wMsgID;  //单字前缀：w
          12、 字符指针前缀  LPCTSTR  ptszName; //TCHAR类型为ptsz LPCSTR  pszName;  //pcsz LPSTR  pszName;  //psz
          13、 STL容器前缀  vector<int> vecValue;  //vector容器前缀：vec
          14、 RECT矩形结构前缀  RECT   rcChild;  //rc CRECT  rcChild/  //rc
          15、 句柄前缀  HWND  hWndDlg; //h HBRUSH  hBr;   //h HPEN  hPen;  //h HBITMAP  hBmpBack; //h
          16、 Windows颜色前缀  COLORREF crFont;  //cr
          17、 Windows DC前缀  CDC   dcClient;  //dc
三、 类的成员变量以m_开头，后面为变量，变量同时还要加前缀。  CString   m_strName; //m_开头+类型前缀+名称
四、 定义一个变量，为了简化，在不影响变量意义的情况下，可仅仅使用前缀。  RECT   rc;
五、 全局变量一律以g_开头，后面为变量，变量同时还要加前缀。 int     g_ID;  //g
六、 定义结构体，保证C和C++兼容，采用typedef语句，并且结构体类型全部大 写，以T_开头，指针形式以PT_开头。 typedef   struct tag TSTUDENT {  int   nId;  CString strName; }STUDENT,*PSTUDENT; STUDENT   tXiaoZhang; //完整定义结构体
七、 变量由多个单词组成，则每个单词的首个字母大写。  int     nStudentID; CString   strStudentName;
八、 定义一个类以C或者T做为类名前缀。  class   CMyListCtrl; class    TMyListCtrl;
九、 MFC控件绑定值类别或者控件类类别，需要以m_开头并且加前缀。  CButton    m_BTN_strValue;  //Button绑定控件类别 CEdit   m_EDT_strValue;  //Edit绑定控件类别 CListBox    m_LB_Name;   //ListBox CListCtrl   m_LC_Name;   //ListCtrl; CComboBox  m_CB_Name;   /ComboBox
十、 控件ID尽量简化并表明控件类型和意义。  Button    IDC_BNT_NAME; Edit    IDC_EDT_NAME; ListBox   IDC_LB_NAME; ListCtrl   IDC_LC_NAME; ComboBox  IDC_CB_NAME;

常见命名规则

1. 比较著名的命名规则首推匈牙利命名法，个人打算放弃
这种命名方法是由Microsoft程序员查尔斯·西蒙尼(Charles Simonyi) 提出的。其主要思想是“在变量和函数名中加入前缀以增进人们对程序的理解”。匈牙利命名法关键是：标识符的名字以一个或者多个小写字母开头作为前缀；前缀之后的是首字母大写的一个单词或多个单词组合，该单词要指明变量的用途。
          例如：lpszStr, 表示指向一个以'\0'结尾的字符串（sz）的长指针（lp）变量。

2. 骆驼（Camel）命名法近年来越来越流行
在许多新的函数库和Java这样的平台下使用得当相多。骆驼命名法，正如它的名称所表示的那样，指的是混合使用大小写字母来构成标识符的名字。其中第一个单词首字母小写，余下的单词首字母大写。
          例如：printEmployeePaychecks()，函数名中每一个逻辑断点都有一个大写字母来标记。

3. 帕斯卡（Pascal）命名法与骆驼命名法类似
只不过骆驼命名法是第一个单词首字母小写，而帕斯卡命名法则是第一个单词首字母大写。
          例如：DisplayInfo()和UserName都是采用了帕斯卡命名法。

在C#中，以帕斯卡命名法和骆驼命名法居多。事实上，很多程序设计者在实际命名时会将骆驼命名法和帕斯卡结合使用，
例如变量名采用骆驼命名法，而函数采用帕斯卡命名法。

4. 还有一种流行的命名规则称为下划线命名法。
下划线法是随着C语言的出现流行起来的，在UNIX/LIUNX这样的环境，以及GNU代码中使用非常普遍。

函数的命名
函数名使用下划线分割小写字母的方式命名：     设备名_操作名()
操作名一般采用：谓语（此时设备名作为宾语或者标明操作所属的模块）或者谓语+宾语/表语（此时设备名作为主语或者标明操作所属的模块） 等形式，如：     tic_init()               adc_is_busy()               uart_tx_char()
中断函数的命名直接使用 设备名_isr() 的形式命名，如：     timer2_isr()

变量的命名
变量的命名也采用下划线分割小写字母的方式命名。
命名应当准确，不引起歧义，且长度适中。如：     int length;               uint32 test_offset;

单字符的名字也是常用的，如i, j, k等，它们通常可用作函数内的局部变量。tmp常用做临时变量名。
局部静态变量，应加s_词冠（表示static），如：static int s_lastw;
全局变量（尤其是供外部访问的全局变量），应加g_词冠（表示global），如：     void (* g_capture_hook)(void);

常量及宏的命名
 采用下划线分割大写字母的方式命名，一般应以设备名作为前缀，防止模块间命名的重复。
          如：      #define TIMER0_MODE_RELOAD 2          #define TIMER2_COUNT_RETRIEVE(val) ((uint16)(65536 - (val)))

当然，看作接口的宏可以按照函数的命名方法命名，例如： #define timer2_clear() (TF2 = 0)          #define timer0_is_expired() (TF0)

常用缩写词
addition add          answer ans          array arr          average avg          buffer buf或buff          capture cap或capt               check chk
count cnt          column col          control ctrl          decode dec          define def          delete del          destination dst或dest
display disp          division div          encode enc          environment env          error err          float flt          frequency freq
header hdr          index idx          image img          increment inc          initalize init          iteration itr          length len          value val
memory mem          middle mid          make mk          message msg          multiplication mul          number num          operand opnd
optimization opt          operator optr          packet pkt          positon pos          previous pre或prev          payload type pt
pointer ptr          return code rc          record rcd          receive recv          result res          return ret          source src
stack stk          string str          subtraction sub          table tab          temporary tmp或temp          total tot          time stamp ts

