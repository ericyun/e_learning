LINUX线程间的通信： 互斥锁/读写锁/信号量/条件变量
增加*((int*)NULL) = 0;强制代码符合某些条件的时候crash，bt查看调用的层级。一个malloc两次free也可以达到类似的效果

Linux系统中的线程间通信方式(线程间只需要同步，不需要数据通信)主要以下几种:
*  锁机制：包括互斥锁、条件变量、读写锁
   互斥锁提供了以排他方式防止数据结构被并发修改的方法。        读写锁允许多个线程同时读共享数据，而对写操作是互斥的。
   条件变量可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。
*  信号量机制(Semaphore)：包括无名线程信号量和命名线程信号量
*  信号机制(Signal)：类似进程间的信号处理
进程间有共享内存，这是线程不需要的。socket IPC RPC等实现主机间通信。
进程间通过PIPE,FIFO,消息队列等实现数据通信。

线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。数据交换可以直接通过互斥锁和全局变量的。

互斥锁
初始化, 静态分配的话，只能使用默认的属性，而对于动态分配的，我们可以设置属性。
     如果互斥锁变量是静态分配的，static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
     如果互斥锁是动态分配的，int pthread_mutex_init(pthread_mutex_t * mutex, const pthread_mutexattr_t * attr);
常用函数原型：
     int pthread_mutex_init(pthread_mutex_t * mutex, const pthread_mutexattr_t * attr);
     int pthread_mutex_lock(pthread_mutex_t *mutex);
     int pthread_mutex_trylock(pthread_mutex_t *mutex); //返回0获取lock，-1失败
          if(0 == pthread_mutex_trylock(&test_mutex)) {}
     int pthread_mutex_unlock(pthread_mutex_t *mutex);
     int pthread_mutex_destroy(pthread_mutex_t *mutex);
一般来说，我们不需要管理pthread_mutexattr_t
     int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
     int pthread_mutexattr_init(pthread_mutexattr_t *attr);
pthread_cond_t 使用，对之所有的调用都需要进入临界区，尤其是destroy，曾经遇到过bug

读写锁

条件变量
条件变量是用来等待而不是用来上锁的。条件变量用来自动阻塞一个线程，直到某特殊情况(某个全局变量发生改变了)发生为止。通常条件变量和互斥锁同时使用；否则，可能要使用频繁的轮训来实现功能。

条件变量要和互斥量相联结，以避免出现条件竞争－－一个线程预备等待一个条件变量，当它在真正进入等待之前，另一个线程恰好触发了该条件。以防止唤醒丢失问题：
     在线程未获得相应的互斥锁时调用pthread_cond_signal或pthread_cond_broadcast函数可能会引起唤醒丢失问题。
     唤醒丢失往往会在下面的情况下发生： 一个线程调用pthread_cond_signal或pthread_cond_broadcast函数；另一个线程正处在测试条件变量和调用pthread_cond_wait函数之间，判断条件不成立之前收到而且无法相应signal，进入长期wait；没有线程正在处在阻塞等待的状态下。

比如程序中需要根据某个全局变量的值来执行某个操作，可能条件判断通过了，执行的时候条件又有变化。如果不用条件变量，就需要用轮训的方式。
和信号量不同，信号量有一个counter，所以post动作会被统计累加，而条件变量不会。所以，我们IPC管理更适合使用条件变量。

int pthread_cond_timedwait(pthread_cond_t * cond, pthread_mutex_t * mutex, const struct timespec * abstime); //abstime是绝对时间
int pthread_cond_wait(pthread_cond_t * cond, pthread_mutex_t * mutex);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_init(pthread_cond_t * cond, const pthread_condattr_t * attr);

int pthread_condattr_destroy(pthread_condattr_t *attr);
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t * attr, int * pshared);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr,int pshared);
int pthread_condattr_getpshared(const pthread_condattr_t * attr, int * pshared);
int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared);
     pshared的值是用来设置这个属性的值，它可以是PTHREAD_PROCESS_PRIVATE（线程间同步）或PTHREAD_PROCESS_SHARED（进程间同步）。

初始化：
pthread_cond_t      connect_cond;     pthread_cond_init(&connect_cond, NULL);
或者：
static pthread_cond_t      connect_cond =PTHREAD_COND_INITIALIZER;
时间等待：
struct timespec      ts;
ts.tv_sec = GlobalCurrTime+5;
ts.tv_nsec = 0;
pthread_mutex_lock(&videohandle_mutex);
while(某条件)
    pthread_cond_timedwait(&temp->connect_cond, &videohandle_mutex);
pthread_mutex_unlock(&videohandle_mutex);
条件等待：
pthread_mutex_lock(&videohandle_mutex);
while(某条件)//防止线程被意外唤醒
     pthread_cond_wait(&temp->connect_cond, &videohandle_mutex);
pthread_mutex_unlock(&videohandle_mutex);
销毁：
pthread_mutex_lock(&videohandle_mutex);
pthread_cond_destroy(&temp->connect_cond);
pthread_mutex_unlock(&videohandle_mutex);

NetConnect_SendEvent  函数，好像最适合使用；当前用的是信号量+互斥锁机制，条件变量应该是可以实现无缝切换，后者不行。

信号量
#include <semaphore.h>

数据类型为结构sem_t，它本质上是一个长整型的数。信号量是在多线程环境中共享资源的计数器。
sem_timedwait 应该定义一个inline函数比较方便，第一参数为sem，第二参数为s单位的时间。
sem_t     g_UdiskMountSem;             sem_init(&g_UdiskMountSem, 0, 0);
struct timespec      ts;     ts.tv_sec = time(NULL)+5;     ts.tv_nsec = 0;     sem_timedwait(&g_UdiskMountSem, &ts);
sem_wait(&g_UdiskMountSem);        sem_post(&g_UdiskMountSem);

int sem_unlink(const char *name);     int sem_destroy (sem_t *sem);
这个函数也使用一个信号量指针做参数，归还自己占据的一切资源。在清理信号量的时候如果还有线程在等待它，用户就会收到一个错误
int sem_getvalue(sem_t *sem, int *valp);     获得信号量sem的值，并保存到valp中
int sem_post(sem_t * sem);
int sem_wait(sem_t * sem);
int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
     对sem_timedwait()错误ETIMEDOUT:调用在信号量锁定之前超时。
int sem_trywait(sem_t * sem);
     sem_trywait调用之后直接返回，如果返回值为0，说明信号量在该函数调用之前大于0，但是调用之后会被该函数自动减1，至于调用之后是否为零则不得而知了。如果返回值为EAGAIN说明信号量计数为0。
     对 sem_trywait()有额外的错误EAGAIN：操作不能执行而不阻塞(也就是说，信号量当前值是零)。

int sem_init((sem_t *__sem, int __pshared, unsigned int __value));
sem_init() 初始化一个定位在 sem 的匿名信号量。value 参数指定信号量的初始值。pshared参数指明信号量是由进程内线程共享，还是由进程之间共享。如果 pshared 的值为0，那么信号量将被进程内的线程共享，并且应该放置在这个进程的所有线程都可见的地址上(如全局变量，或者堆上动态分配的变量)。
如果 pshared 是非零值，那么信号量将在进程之间共享，并且应该定位共享内存区域(见 shm_open(3)、mmap(2) 和 shmget(2))。(因为通过 fork(2)创建的孩子继承其父亲的内存映射，因此它也可以见到这个信号量。所有可以访问共享内存区域的进程都可以用 sem_post(3)、sem_wait(3) 等等操作信号量。初始化一个已经初始的信号量其结果未定义。
返回值: sem_init() 成功时返回 0；错误时，返回 -1，并把 errno 设置为合适的值。
错误:     EINVAL -- value 超过 SEM_VALUE_MAX。          ENOSYS -- pshared 非零，但系统还没有支持进程共享的信号量。

有名信号量
sem_open
函数说明：创建并初始化有名信号灯。
头文件：#include <semaphore.h>     函数原型：sem_t *sem_open(const char *name,int oflag,mode_t mode,unsigned int value);
     例子： sem_t *sem=sem_open("/named_sem",O_CREAT,0644,1);
参数：name 信号灯的外部名字     oflag 选择创建或打开一个现有的信号灯     mode 权限位     value 信号灯初始值
返回值：     成功时返回指向信号灯的指针，出错时为SEM_FAILED
oflag参数可以是0、O_CREAT（创建一个信号灯）或O_CREAT|O_EXCL（如果没有指定的信号灯就创建），如果指定了O_CREAT，那么第三个和第四个参数是需要的；其中mode参数指定权限位，value参数指定信号灯的初始值，通常用来指定共享资源的书面。该初始不能超过SEM_VALUE_MAX，这个常值必须低于为32767。二值信号灯的初始值通常为1，计数信号灯的初始值则往往大于1。
如果指定了O_CREAT（而没有指定O_EXCL），那么只有所需的信号灯尚未存在时才初始化它。所需信号灯已存在条件下指定O_CREAT不是一个错误。该标志的意思仅仅是“如果所需信号灯尚未存在，那就创建并初始化它”。但是所需信号灯等已存在条件下指定O_CREAT|O_EXCL却是一个错误。
sem_open返回指向sem_t信号灯的指针，该结构里记录着当前共享资源的数目。

有名信号量与基于内存的信号量区别：
1.创建有名信号量必须指定一个与信号量相关链的文件名称，这个name通常是文件系统中的某个文件。基于内存的信号量不需要指定名称
2.有名信号量sem 是由sem_open分配内存并初始化成value值；基于内存的信号量是由应用程序分配内存，有sem_init初始化成为value值。如果shared为1，则分配的信号量应该在共享内存中。
3.sem_open不需要类似shared的参数，因为有名信号量总是可以在不同进程间共享的；而基于内存的信号量通过shared参数来决定是进程内还是进程间共享，并且必须指定相应的内存
4.基于内存的信号量不使用任何类似于O_CREAT标志的东西，也就是说，sem_init总是初始化信号量的值，因此，对于一个给定的信号量，我们必须小心保证只调用sem_init一次，对于一个已经初始化过的信号量调用sem_init,结果是未定义的。
5.内存信号量通过sem_destroy删除信号量，有名信号量通过sem_unlink删除

