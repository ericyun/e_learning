BITMAP函数组
每一个BIT代表一个通道的状态，通过索引来访问。好像应该定义一个临界区来保护一下。

int BitMap_BitMapEqual(int* pbitmap1, int* pbitmap2, int sizeinbytes)
{
    int i=0, max_elment = sizeinbytes/4;

    for(i=0;i<max_elment;i++)
    {
        if(pbitmap1[i] != pbitmap2[i])
        {
            return 0;
        }
    }
    return 1;
}

void BitMap_ClearAllChans(int* pbitmap, int sizeinbytes)
{
    int i=0, max_elment = sizeinbytes/4;

    for(i=0;i<max_elment;i++)
    {
        pbitmap[i] = 0;
    }
}

void BitMap_InitAllValidChans(int* pbitmap, int maxsizeinbytes, int maxchannum)
{
    int i=0, max_bits = maxsizeinbytes*8;
    int real_bits = MIN(max_bits, maxchannum);

    for(i=0;i<real_bits;i++)
    {
        pbitmap[i/32] |= 1ul<<(i%32);
    }
    for(i=real_bits;i<max_bits;i++)
    {
        pbitmap[i/32] &= ~(1ul<<(i%32));
    }
    return 0;
}

int BitMap_DetectInvalidChans(int* pbitmap, int maxsizeinbytes, int maxchannum)
{
    int i=0, max_bits = maxsizeinbytes*8;
    int real_bits = MIN(max_bits, maxchannum);

    for(i=real_bits;i<max_bits;i++)
    {
        if(pbitmap[i/32] & (1ul<<(i%32)))
        {
            return 1;
        }
    }
    return 0;
}

void BitMap_ClearInvalidChans(int* pbitmap, int maxsizeinbytes, int maxchannum)
{
    int i=0, max_bits = maxsizeinbytes*8;
    int real_bits = MIN(max_bits, maxchannum);

    for(i=real_bits;i<max_bits;i++)
    {
        pbitmap[i/32] &= ~(1ul<<(i%32));
    }
}

int BitMap_AllChansCleared(int* pbitmap, int maxsizeinbytes)
{
    int i=0, max_elment = maxsizeinbytes/4;

    for(i=0;i<max_elment;i++)
    {
        if(pbitmap[i])
            return 0;
    }

    return 1;
}

int BitMap_GetChanState(int* pbitmap, int maxsizeinbytes, int chan)
{
     if(chan >= maxsizeinbytes * 8){
          return 0;
     }
    if(pbitmap[chan/32]&(1ul<<(chan%32)))
        return 1;
    else
        return 0;
}

int BitMap_OrBitmapState(int* pdstmap, int* psrcmap, int maxsizeinbytes)
{
    int i=0, max_elment = maxsizeinbytes/4;

    for(i=0;i<max_elment;i++)
    {
        pdstmap[i] |= psrcmap[i];
    }
}

void BitMap_SetChanState(int* pbitmap, int maxsizeinbytes, int chan)
{
     if(chan >= maxsizeinbytes * 8){
          return ;
     }
    pbitmap[chan/32] |= 1ul<<(chan%32);
}

void BitMap_ClearChanState(int* pbitmap, int maxsizeinbytes, int chan)
{
     if(chan >= maxsizeinbytes * 8){
          return ;
     }
    pbitmap[chan/32] &= ~(1ul<<(chan%32));
}

void BitMap_DisplayChanState(char* pcomment, int* pbitmap, int maxsizeinbytes)
{
    int i=0, max_elment = maxsizeinbytes/4;

    for(i=0;i<max_elment;i++)
    {
        APP_LVLED_LOG(DBMOD_0, DBLEV_3, "%s ChansBitMapARRAY element%d: 0x%x --\n",pcomment,  i, pbitmap[i]);
    }
}

