C语言可变参数函数
inline 深入了解          宏定义可以有返回值。

可变参数函数 编译时间
查询 ##args 的含义和应用。
     #define PDEBUG(fmt, args...) printk( KERN_DEBUG "DEMO: " fmt, ## args)
     #define PDEBUG(fmt, args...) fprintf(stderr, fmt, ## args)
     args 是用来代表...可变参数部分，可能为空；fmt代表固定参数部分。##args用在宏里面，表示如果args为空则消除前面的逗号，它不能用在函数中

普通函数改造，打印上层调用函数：
     extern ssize_t writen_i(int fd, const void *vptr, size_t n, const char* format, ...);
     #define writen(fd,vptr,n,args...) writen_i(fd,vptr,n,"%s",__FUNCTION__,##args)

C语言可变参数函数(VA函数，variable argument function)

VA_LIST 所在头文件：#include <stdarg.h>

函数原型中为  TYPE args, ...    宏定义的名称部分为 args...   宏定义的实体部分用 ##args代替  函数调用和宏调用，使用实际的实体参数

va函数的优势表现在使用的方便性和易用性上，可以使代码更简洁。参数列表中，有名字的为固定参数

1. 常用VA函数原型：
     int printf(const char * format, ...);
     int vprintf / vscanf(const char * format, va_list ap); // 从标准输入/输出格式化字符串
     int vfprintf / vfsacanf(FILE * stream, const char * format, va_list ap);// 从文件流
     int vsprintf / vsscanf(char * s, const char * format, va_list ap); // 从字符串
C函数调用的栈结构 :  可变参数函数的实现与函数调用的栈结构密切相关，正常情况下C的函数参数入栈规则为__stdcall, 它是从右到左的，即函数中的最右边的参数最先入栈。例如，对于函数： void fun(int a, int b, int c)  {        int d;        ...  }   其栈结构为    0x1ffc-->d    0x2000-->a    0x2004-->b    0x2008-->c

2. 基本使用：
     va_list arg_ptr：定义一个指向个数可变的参数列表指针；
     va_start(arg_ptr, argN)：使参数列表指针arg_ptr指向函数参数列表中的第一个可选参数，说明：argN是位于第一个可选参数之前的固定参数，（或者说，最后一个固定参数；…之前的一个参数），函数参数列表中参数在内存中的顺序与函数声明时的顺序是一致的。如果有一va函数的声明是void           va_test(char a, char b, char c, …)，则它的固定参数依次是a,b,c，最后一个固定参数argN为c，因此就是va_start(arg_ptr, c)。
     va_arg(arg_ptr, type)：返回参数列表中指针arg_ptr所指的参数，返回类型为type，并使指针arg_ptr指向参数列表中下一个参数。
     va_copy(dest, src)：dest，src的类型都是va_list，va_copy()用于复制参数列表指针，将dest初始化为src。
     va_end(arg_ptr)：清空参数列表，并置参数指针arg_ptr无效。
3. 应用范例
// 例1：格式化到一个文件流，可用于日志文件
FILE *logfile;
int WriteLog(const char * format, ...)
{
va_list arg_ptr;
va_start(arg_ptr, format);
int nWrittenBytes = vfprintf(logfile, format, arg_ptr);
va_end(arg_ptr);
return nWrittenBytes;
}
// 调用时，与使用printf()没有区别。
WriteLog("%04d-%02d-%02d %02d:%02d:%02d  %s/%04d logged out.",
nYear, nMonth, nDay, nHour, nMinute, szUserName, nUserID);

// 例2：求任意个自然数的平方和：
int SqSum(int n1, ...)
{
va_list arg_ptr;
int nSqSum = 0, n = n1;
va_start(arg_ptr, n1);
while (n > 0)
{
    nSqSum += (n * n);
    n = va_arg(arg_ptr, int);
}
va_end(arg_ptr);
return nSqSum;
}

int my_printf(const char *fmt, ...)//...表示参数可变
{
     va_list args;//定义va_list
     static char gc_PrintfOutBuff[1000];
     va_start(args, fmt);//初始化
     vsnprintf((char *) gc_PrintfOutBuff, 1000, (char *) fmt, args);//这里没有使用VA_ARG取回单个变量，而是借用vsnprinf一次性读取。
     va_end(args);//结束获取
     puts("%s",(const char *)gc_PrintfOutBuff);//使用。
     return 0;
}

A.   软件编译时间
     snprintf((S8*)sys_info.release_date, sizeof(sys_info.release_date), "%s, %s", __DATE__, __TIME__);

rtsp协议中，已经有双声道的定义的，在 Boolean MediaSubsession::parseSDPAttribute_rtpmap(char const* sdpLine)
函数中，有相应字段的的解析("a=rtpmap: %u%[^/]/%u/%u",最后的%u字段定义多少声道)

