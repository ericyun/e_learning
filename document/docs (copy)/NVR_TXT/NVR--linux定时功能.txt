LINUX定时功能
select,和sleep是可重入函数，在使用的时候会引起线程的切换；所以有“不会影响信号处理线程安全”而usleep，nanosleep，不可重入函数，程序是在暂停状态，也就是不能线程切换；但是不知道setitimer会不会记时；

作是终止调用该alarm函数的进程。
延时功能的实现：
1. sleep 和 usleep
2. 使用信号量SIGALRM + alarm()
3. 使用RTC机制
     RTC机制利用系统硬件提供的Real Time Clock机制，通过读取RTC硬件/dev/rtc，通过ioctl()设置RTC频率，代码如下：
     int fd = open ("/dev/rtc", O_RDONLY);
     if(ioctl(fd, RTC_IRQP_SET, 1) < 0){}     /*Set the freq as 4Hz*/
     if(ioctl(fd, RTC_PIE_ON, 0) < 0){}          /* Enable periodic interrupts */
     if(read(fd, &data, sizeof(unsigned long)) < 0){}     /*read return when timeout*/
     ioctl(fd, RTC_PIE_OFF, 0);
     close(fd);
4. select()机制
     struct timeval temp;
     temp.tv_sec = seconds;
     temp.tv_usec = mseconds;
     select(0, NULL, NULL, NULL, &temp);

usleep() 有有很大的问题

在进程的主线程(main)里使用sleep或者usleep会挂起整个进程，而在其他线程里使用，进程不会被挂起。？

在一些平台下不是线程安全，如HP-UX以及Linux
usleep() 会影响信号
在很多平台，如HP-UX以及某些Linux下，当参数的值必须小于1 * 1000 * 1000也就是1秒，否则该函数会报错，并且立即返回。
大部分平台的帮助文档已经明确说了，该函数是已经被舍弃的函数。
还好，POSIX规范中有一个很好用的函数，nanosleep() ，该函数没有usleep() 的这些缺点，它的精度是纳秒级。在Solaris的多线程环境下编译器会自动把usleep() 连接成nanosleep() 。

Linux下短延时推荐使用select函数.

Linux定时器函数setitimer
在linux下如果定时如果要求不太精确的话，使用alarm()和signal()就行了（精确到秒），但是如果想要实现精度较高的定时功能的话，就要使用setitimer函数。

setitimer()为Linux的API，并非C语言的Standard Library，setitimer()有两个功能，一是指定一段时间后，才执行某个function，二是每间格一段时间就执行某个function
int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue));
int getitimer(int which, struct itimerval *value);
strcut timeval
{
   long tv_sec; /*秒*/
   long tv_usec; /*微秒*/
};

struct itimerval
{
   struct timeval it_interval; /*时间间隔*/
   struct timeval it_value; /*当前时间计数*/
};
setitimer()比alarm功能强大，支持3种类型的定时器：
ITIMER_REAL: 给一个指定的时间间隔，按照实际的时间来减少这个计数，当时间间隔为0的时候发出SIGALRM信号
ITIMER_VIRTUAL: 给定一个时间间隔，当进程执行的时候才减少计数，时间间隔为0的时候发出SIGVTALRM信号
ITIMER_PROF: 给定一个时间间隔，当进程执行或者是系统为进程调度的时候，减少计数，时间到了，发出SIGPROF信号。
Setitimer()第一个参数which指定定时器类型（上面三种之一）；第二个参数是结构itimerval的一个实例；第三个参数可不做处理。
下面是关于setitimer调用的一个简单示范，在该例子中，每隔一秒发出一个SIGALRM，每隔0.5秒发出一个SIGVTALRM信号：：
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <sys/time.h>
int sec;
void sigroutine(int signo){
   switch (signo){
   case SIGALRM:
       printf("Catch a signal -- SIGALRM \n");
       signal(SIGALRM, sigroutine);
       break;
   case SIGVTALRM:
       printf("Catch a signal -- SIGVTALRM \n");
       signal(SIGVTALRM, sigroutine);
       break;
   }
   return;
}

int main()
{
   struct itimerval value, ovalue, value2;

   sec = 5;
   printf("process id is %d ", getpid());
   signal(SIGALRM, sigroutine);
   signal(SIGVTALRM, sigroutine);
   value.it_value.tv_sec = 1;
   value.it_value.tv_usec = 0;
   value.it_interval.tv_sec = 1;
   value.it_interval.tv_usec = 0;
   setitimer(ITIMER_REAL, &value, &ovalue);
   value2.it_value.tv_sec = 0;
   value2.it_value.tv_usec = 500000;
   value2.it_interval.tv_sec = 0;
   value2.it_interval.tv_usec = 500000;
   setitimer(ITIMER_VIRTUAL, &value2, &ovalue);
   for(;;);
}
注意：Linux信号机制基本上是从Unix系统中继承过来的。早期Unix系统中的信号机制比较简单和原始，后来在实践中暴露出一些问题，因此，把那些建立在早期机制上的信号叫做"不可靠信号"，信号值小于SIGRTMIN(Red hat 7.2中，SIGRTMIN=32，SIGRTMAX=63)的信号都是不可靠信号。这就是"不可靠信号"的来源。它的主要问题是：进程每次处理信号后，就将对信号的响应设置为默认动作。在某些情况下，将导致对信号的错误处理；因此，用户如果不希望这样的操作，那么就要在信号处理函数结尾再一次调用 signal()，重新安装该信号。

闹钟alarm()
alarm也称为闹钟函数，它可以在进程中设置一个定时器，当定时器指定的时间到时，它向进程发送SIGALRM信号。如果忽略或者不捕获此信号，则其默认动作是终止调用该alarm函数的进程。

#include<unistd.h>
unsigned int alarm(unsigned int seconds);     seconds:指定秒数
返回：成功:如果调用此alarm()前，进程已经设置了闹钟时间，则返回上一个闹钟时间的剩余时间，否则返回0。出错:-1
注意：要注意的是，一个进程只能有一个闹钟时间，如果在调用alarm之前已设置过闹钟时间，则任何以前的闹钟时间都被新值所代替。需要注意的是，经过指定的秒数后，信号由内核产生，由于进程调度的延迟，所以进程得到控制从而能够处理该信号还需要一些时间。
如果有以前为进程登记的尚未超时的闹钟时钟，而且本次调用的seconds值是0，则取消以前的闹钟时钟，其余留值仍作为alarm函数的返回值

可以配合 pause()函数暂停当前进程使用。
当在调用alarm()前已经设置了一个闹钟，那么我们可以调用alarm(0)来取消此闹钟，并返回剩余时间。

下面函数设置了一个循环的闹钟，5s闹一次。
#include<unistd.h>
#include<signal.h>
void handler()
{
    printf("Hello\n");
    signal(SIGALRM, handler); //让内核做好准备，一旦接受到SIGALARM信号,就执行 handler
    alarm(5);
}
void main()
{
    signal(SIGALRM, handler);
    alarm(5);
}

